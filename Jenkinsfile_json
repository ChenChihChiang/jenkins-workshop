@Library('jenkins-shared-library@master') _
import groovy.json.JsonSlurper

pipeline {
  agent any

  parameters {
      string(name: 'BASH_TIMES', defaultValue: '5', description: 'BASH_TIMES', trim: true)
      string(name: 'PYTHON_TIMES', defaultValue: '10', description: 'PYTHON_TIMES', trim: true)
  }

  environment {
      BASH_TIMES = "${params.BASH_TIMES}"
      PYTHON_TIMES = "${params.PYTHON_TIMES}"
      PYTHON_JSON = libraryResource('data.json')
  }
	
  stages {

    stage('echo yaml') {
      steps {
        script{
	  yfile = readYaml (text: libraryResource('pod.yaml'))
          echo yfile.toString()
	  echo "image = ${yfile.spec.containers.image}"
	  echo "image = ${yfile.spec.containers.[1].image}"
        }
      }
    }

    stage('echo json') {
      steps {
        script{
          def data = libraryResource('data.json')
          echo data
	  println data.getClass() 
        }
      }
    }

    stage('parse json') {
      steps {
        script{
          def load_json = new JsonSlurper().parseText(PYTHON_JSON)
          echo "${load_json}"
	  echo "Topic is ${load_json.topic}"
	  echo "HOST is ${load_json.host1}"
	  echo "Today is ${load_json.date}"
        }
      }
    }

    stage('bash loop.sh') {
      steps {
        script{
         sh (libraryResource('loop.sh'))
        }
      }
    }

    stage('python loop.py') {
      steps {
        script{
          def myscript = libraryResource('loop.py')
          sh (myscript)
        }
      }
    }
  }

  post {
    always {
      echo 'I will always run...'
    }
    success {
      script{
          echo "success"
        }
      }
    failure {
      script{
          echo "Failure"
      }
    }     
  }
}
